server.port=8080

url.auth.service=http://localhost:8098
auth.path=/auth
auth.name=auth-service

url.validator.api=http://localhost:8432
validator.path=/api/v1/validator
validator.name=validator-api

url.producer.api=http://localhost:8321
producer.path=/api/v1/producer
producer.name=producer-api

url.consumer.api=http://localhost:8210
consumer.path=/api/v1/consumer
consumer.name=consumer-api

spring.cloud.loadbalancer.ribbon.enabled=false
server.forward-headers-strategy=framework

# Todo lo que vaya a /validator se securiza
spring.cloud.gateway.routes[0].id=${validator.name}
spring.cloud.gateway.routes[0].uri=${url.validator.api}
spring.cloud.gateway.routes[0].predicates[0]=Path=${validator.path}/**
spring.cloud.gateway.routes[0].filters[0]=AuthFilter=Validator

# Todo lo que vaya a /consumer se deja paso
spring.cloud.gateway.routes[1].id=${consumer.name}
spring.cloud.gateway.routes[1].uri=${url.consumer.api}
spring.cloud.gateway.routes[1].predicates[0]=Path=${consumer.path}/**


# Todo lo que vaya a /producer se deja paso
spring.cloud.gateway.routes[2].id=${producer.name}-public
spring.cloud.gateway.routes[2].uri=${url.producer.api}
spring.cloud.gateway.routes[2].predicates[0]=Path=${producer.path}


# Todo lo que vaya a /producer/* se securiza
spring.cloud.gateway.routes[3].id=${producer.name}-private
spring.cloud.gateway.routes[3].uri=${url.producer.api}
spring.cloud.gateway.routes[3].predicates[0]=Path=${producer.path}/**
spring.cloud.gateway.routes[3].filters[0]=AuthFilter=Producer,Validator



# Todo lo que vaya a /auth se deja paso
spring.cloud.gateway.routes[4].id=${auth.name}
spring.cloud.gateway.routes[4].uri=${url.auth.service}
spring.cloud.gateway.routes[4].predicates[0]=Path=${auth.path}/**
